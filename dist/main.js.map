{"version":3,"file":"main.js","mappings":"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","sources":["webpack://botwheels/./src/moving_object.js","webpack://botwheels/./src/track.js","webpack://botwheels/./src/car.js","webpack://botwheels/./src/game.js","webpack://botwheels/./src/index.js"],"sourcesContent":["\nexport default class MovingObject {\n    constructor(game){\n        this.velocityX = 0;\n        this.velocityY = 0;\n        this.dimensions = game.dimensions;\n        this.positionX = this.dimensions.width;\n        this.positionY = this.dimensions.height/2;\n        this.hitBox = {}\n        this.vector = 0\n        this.game = game;\n        this.trackBox = new Path2D()\n        this.downHillBox = new Path2D()\n    }\n\n    isCollidedWith(boundsObject){ // will only be called on t he car and this will eventually expect an array of items to potentially collide with\n        let collision = {}\n        for (let corner in this.hitBox){\n            let pos = this.hitBox[corner]\n            if (this.game.ctx.isPointInPath(boundsObject.trackBox, pos[0], pos[1])){\n                collision[corner] = pos\n            } else if (this.game.ctx.isPointInPath(boundsObject.downHillBox, pos[0], pos[1])){\n                collision[corner] = pos\n            }\n        }\n        if (JSON.stringify(collision) === '{}'){\n            collision = false\n        }\n        return collision\n    }\n\n}","import MovingObject from \"./moving_object\";\n\n\nexport default class Track extends MovingObject {\n    constructor(game){\n        super(game)\n        this.velocityX = 0\n        this.positionY = Track.getRandomInt(0, this.dimensions.height)\n        this.vector = Math.atan(100/800)\n    }\n\n    firstTrack(){\n        this.positionY = (this.game.dimensions.height / 3) * 2\n        this.positionX = this.dimensions.width / 5\n    }\n\n    animate(){\n        this.moveTrack()\n        // this.drawFlat()\n        this.drawDownHill()\n        this.boundBy()\n    }\n\n    drawDownHill(){\n        this.downHillBox = new Path2D();\n        this.game.ctx.fillStyle = 'orangered';\n        this.downHillBox.moveTo(this.positionX, this.positionY)\n        this.downHillBox.lineTo(this.positionX + 800, this.positionY + 100)\n        this.downHillBox.lineTo(this.positionX + 800, this.positionY + 120)\n        this.downHillBox.lineTo(this.positionX, this.positionY + 20)\n        this.downHillBox.closePath()\n        this.game.ctx.fill(this.downHillBox);\n    }\n\n    drawFlat(){\n        this.trackBox = new Path2D();\n        this.center = [this.positionX + T_CONSTANTS.TRACK_L/2, this.positionY + T_CONSTANTS.TRACK_H/2]\n        this.trackBox.rect(this.positionX, this.positionY, T_CONSTANTS.TRACK_L, T_CONSTANTS.TRACK_H)\n        this.game.ctx.fillStyle = \"orangered\"\n        this.game.ctx.fill(this.trackBox)\n    }\n\n\n\n    drawCurve(){\n\n    }\n\n    moveTrack(){\n        this.positionX -= this.velocityX \n    }\n\n    boundBy(){ // we'll just focus on the top line of the track at the moment\n        this.hitBox.topLeft = [this.positionX, this.positionY]\n        this.hitBox.topRight = [this.positionX + T_CONSTANTS.TRACK_L, this.positionY]\n    }\n\n\n    static getRandomInt(min, max){\n        return Math.random() * (max - min) + min;\n    }\n}\n\nconst T_CONSTANTS = {\n    TRACK_H: 20,\n    TRACK_L: 900, //Track.getRandomInt(500, 900)\n    VECTOR: Math.PI / 32\n    // SPEED: 5\n}","import MovingObject from \"./moving_object\";\nimport Track from \"./track\";\n\nexport default class Car extends MovingObject {\n    constructor(game){\n        super(game);\n        this.positionX = this.dimensions.width / 4\n        this.velocityX = CONSTANTS.VEL_X;\n        this.velocityY = CONSTANTS.VEL_Y;\n        this.vector = 0\n        this.jumpPower = .5;\n        this.grounded = false;\n        this.rotation = true;\n        this.landing = false;\n        this.hypotenuse = Math.sqrt(Math.pow(CONSTANTS.CAR_WIDTH/2, 2) + Math.pow(CONSTANTS.CAR_HEIGHT/2, 2))\n        this.theta = Math.atan((CONSTANTS.CAR_HEIGHT/2)/(CONSTANTS.CAR_WIDTH/2))\n    }\n\n    animate(){\n        this.jump()\n        this.rotateCar();\n        this.move();\n        this.drawCar();\n        this.isBoundBy();\n        this.landedOnTrack();\n        this.landProperly();\n    }\n\n    move(){\n        this.positionX += this.velocityX;\n        this.positionY += this.velocityY;\n        if (this.grounded === false && this.velocityY < CONSTANTS.TERMINAL_VEL){\n            this.velocityY += CONSTANTS.GRAVITY;\n        }\n        if ((this.game.keyState.forward === true)){\n         // if (this.game.keyState.forward === true && this.positionX < this.dimensions.width / 3){\n            this.velocityX = 4;\n        // } else if (this.game.keyState.forward === true && this.positionX >= this.dimensions.width / 3) {\n        //     this.velocityX = 0;\n        //     this.game.tracks.forEach (track => track.velocityX = 4)\n            //tracks need to move\n        } else {\n            this.velocityX = 0\n            // this.game.tracks.forEach (track => track.velocityX = 0)\n        }\n    }\n\n    jump(){\n        if (this.game.keyState.spaceDown === true){\n            if (this.jumpPower <= 1.5){\n                this.jumpPower += .25;\n            } \n        } else if (this.game.keyState.spaceRelease === true) {\n            if (this.grounded === true){\n                this.velocityY = -(CONSTANTS.TERMINAL_VEL) * this.jumpPower;\n                this.grounded = false;\n            }\n            this.game.keyState.spaceRelease = false\n            this.jumpPower = .5;\n        }\n    }\n\n    rotateCar(){\n        if (this.game.keyState.leftDown === true && this.grounded === false){\n            this.rotation = true\n            this.vector += -Math.PI / 64\n        } else if (this.game.keyState.rightDown === true && this.grounded === false){\n            this.rotation = true\n            this.vector += Math.PI / 64\n        } else {\n            this.rotation = false\n            // this.vector = 0\n        }\n    }\n\n    drawCar(){\n        this.carBox = new Path2D();\n        this.game.ctx.save()\n        this.center = [this.positionX + CONSTANTS.CAR_WIDTH/2, this.positionY + CONSTANTS.CAR_HEIGHT/2]\n        if (this.rotation === true || this.vector != 0){\n            this.game.ctx.translate(...this.center);\n            this.game.ctx.rotate(this.vector % (Math.PI * 2));\n            this.game.ctx.translate(-this.center[0], -this.center[1]);\n        }\n        this.carBox.rect(this.positionX, this.positionY, CONSTANTS.CAR_WIDTH, CONSTANTS.CAR_HEIGHT);\n        this.game.ctx.fillStyle = 'orangered';\n        this.game.ctx.fill(this.carBox)\n        // this.game.ctx.fillRect(this.positionX, this.positionY, CONSTANTS.CAR_WIDTH, CONSTANTS.CAR_HEIGHT);\n        this.game.ctx.restore()\n    }\n\n    isBoundBy(){\n        // bottom left, top left, top right, bottom right\n        let angleOne = this.vector + this.theta  // bottom right angle\n        let angleTwo = this.vector - this.theta // top right angle\n        let angleThree = -this.vector + this.theta // bottom left angle\n        let angleFour = -this.vector - this.theta // top left angle\n        let angleFive = this.vector // right\n        let angleSix = -this.vector // left\n        let cornerArray = [angleOne, angleTwo, angleThree, angleFour]\n        let sideArray = [angleFive, angleSix]\n        let coordinateArray = []\n        cornerArray.forEach ((angle, i) => {\n            let x = this.hypotenuse * Math.cos(angle)\n            let y = this.hypotenuse * Math.sin(angle)\n            if (i < 2){\n                coordinateArray.push([this.center[0] + x, this.center[1] + y])\n            } else {\n                coordinateArray.push([this.center[0] - x, this.center[1] + y])\n            }\n        })\n        this.hitBox.bottomRight = coordinateArray[0]\n        this.hitBox.topRight = coordinateArray[1]\n        this.hitBox.bottomLeft = coordinateArray[2]\n        this.hitBox.topLeft = coordinateArray[3]\n\n        sideArray.forEach ((angle, i) => {\n            let x = (CONSTANTS.CAR_WIDTH/2) * Math.cos(angle)\n            let y = (CONSTANTS.CAR_WIDTH/2) * Math.sin(angle)\n            if (i === 0){\n                coordinateArray.push([this.center[0] + x, this.center[1] + y])\n            } else {\n                coordinateArray.push([this.center[0] - x, this.center[1] + y])\n            }\n        })\n        this.hitBox.rightSide = coordinateArray[4]\n        this.hitBox.leftSide = coordinateArray[5]\n    }\n\n    landedOnTrack(){\n        for (let i = 0; i < this.game.tracks.length; i++){\n            let collisionObj = this.isCollidedWith(this.game.tracks[i])\n            if (collisionObj !== false){\n                // console.log(this.isCollidedWith(this.game.tracks[i]))\n                this.velocityY = 0;\n                this.landingVector = this.game.tracks[i].vector\n                if (Object.keys(collisionObj).length === 2){\n                    this.landing = false;\n                    this.grounded = true; //means you can't jump until you land\n                    this.vector = this.landingVector\n                } else {\n                    this.landing = collisionObj;\n                    this.grounded = false;\n                }\n                break \n            } else {\n                this.landing = false;\n                this.grounded = false;\n            }\n        }\n    }\n\n    landProperly(){\n        if (this.landing !== false){\n            let currentVec = this.vector % (Math.PI * 2)\n            // if ( currentVec < Math.PI / 2 && currentVec > 0){\n            if (this.landing.hasOwnProperty('bottomRight')){\n                // console.log(\"tip left\")\n                if (currentVec - (Math.PI/32) > this.landingVector){\n                    this.vector = this.landingVector    \n                } else {\n                    this.rotation = true\n                    this.vector += -Math.PI / 64 \n                }\n\n            } else if (this.landing.hasOwnProperty('bottomLeft')){\n            // else if (currentVec > -Math.PI / 2 && currentVec < 0){\n                // console.log(\"tip right\")\n                if (currentVec + (Math.PI/32) < this.landingVector){\n                    this.vector = this.landingVector\n                } else {\n                    this.rotation = true\n                    this.vector += Math.PI / 64\n                }\n            }\n        }\n    }\n\n\n\n}\n\nconst CONSTANTS = {\n    GRAVITY: 0.8,\n    TERMINAL_VEL: 12,\n    CAR_WIDTH: 80,\n    CAR_HEIGHT: 50,\n    VEL_X: 0,\n    VEL_Y: 0\n}","import Car from \"./car\";\nimport Track from \"./track\";\n\nexport default class BotWheels {\n    constructor(canvas){\n        this.ctx = canvas.getContext(\"2d\");\n        this.dimensions = {\n            width: canvas.width, \n            height: canvas.height\n        };\n\n        this.MAP_WIDTH = 4000;\n        this.MAP_HEIGHT = 2000;\n\n        this.keyState = {\n            spaceDown: false,\n            spaceRelease: false,\n            leftDown: false,\n            rightDown: false,\n            forward: false\n        }\n        \n        document.addEventListener('keydown', this.keyDown.bind(this));\n        document.addEventListener('keyup', this.keyUp.bind(this));\n        canvas.addEventListener('click', this.restartButton.bind(this))\n        \n\n    }\n\n    drawBackground(ctx) {\n        ctx.fillStyle = \"skyblue\";\n        ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n    }\n\n    drawRestart(ctx) {\n        ctx.fillStyle = \"orangered\";\n        ctx.fillRect((this.dimensions.width / 12) * 11, (this.dimensions.height / 8) * 7, 60, 60)\n        ctx.font = '36px serif';\n        ctx.fillStyle = \"white\";\n        ctx.fillText(\"R\", (this.dimensions.width / 16) * 15, (this.dimensions.height / 18) * 17)\n    }\n\n    animate() {\n        this.drawBackground(this.ctx);\n        this.drawRestart(this.ctx);\n        this.animateTracks();\n        this.car.animate();\n        if (this.running === true){\n            requestAnimationFrame(this.animate.bind(this));\n        }\n    }\n\n    restart() {\n        this.tracks = this.createTracks();\n        this.car = new Car(this);\n        this.running = false;\n        this.play();\n    }\n\n    restartButton() {\n        while (this.tracks.length > 1){\n            this.tracks.pop()\n        }\n        this.tracks[0].firstTrack()\n        this.car.positionX = this.dimensions.width / 4\n        this.car.positionY = this.dimensions.height / 2\n        this.car.vector = 0\n        // this.grounded = false\n    }\n\n    play() {\n        this.running = true;\n        this.animate();\n    }\n\n    setCamera(){\n        this.cameraX = -(this.MAP_WIDTH / 2)\n    }\n\n    createTracks(){\n        const startingTracks = []\n        let firstTrack = new Track(this)\n        firstTrack.firstTrack()\n        startingTracks.push(firstTrack)\n        return startingTracks\n    }\n\n    regulateTracks(){\n        if (this.tracks[this.tracks.length - 1].hitBox.topRight[0] < this.dimensions.width){\n            let nextTrack = new Track(this)\n            this.tracks.push(nextTrack)\n        } \n        if (this.tracks[0].hitBox.topRight[0] < 0){\n            this.tracks.shift()\n        }\n    }\n\n    animateTracks(){\n        for (let i = 0; i < this.tracks.length; i++){\n            this.tracks[i].animate()\n            this.regulateTracks()\n        }\n    }\n    \n    keyDown(e){ // dry up this code\n        if (e.code === \"Space\" && this.running === true){\n            this.keyState.spaceDown = true;\n        } else if (e.code === \"ArrowLeft\" && this.running === true){\n            this.keyState.leftDown = true;\n        }  else if (e.code === \"ArrowRight\" && this.running === true){\n            this.keyState.rightDown = true;\n        } else if (e.code === \"ArrowUp\" && this.running ===  true){\n            this.keyState.forward = true;\n        }\n    }\n\n    keyUp(e){ // dry up this code\n        if (e.code === \"Space\" && this.running === true){\n            this.keyState.spaceRelease = true;\n            this.keyState.spaceDown = false;\n        } else if (e.code === \"ArrowLeft\" && this.running === true){\n            this.keyState.leftDown = false;\n        } else if (e.code === \"ArrowRight\" && this.running === true){\n            this.keyState.rightDown = false;\n        } else if (e.code === \"ArrowUp\" && this.running ===  true){\n            this.keyState.forward = false;\n        }\n        \n    }\n\n}\n\n","import BotWheels from \"./game\";\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById(\"canvas\");\n    canvas.width = 900\n    canvas.height = 600\n    const botWheels1 = new BotWheels(canvas);\n    botWheels1.restart()\n});"],"names":["MovingObject","constructor","game","this","velocityX","velocityY","dimensions","positionX","width","positionY","height","hitBox","vector","trackBox","Path2D","downHillBox","isCollidedWith","boundsObject","collision","corner","pos","ctx","isPointInPath","JSON","stringify","Track","super","getRandomInt","Math","atan","firstTrack","animate","moveTrack","drawDownHill","boundBy","fillStyle","moveTo","lineTo","closePath","fill","drawFlat","center","T_CONSTANTS","TRACK_L","TRACK_H","rect","drawCurve","topLeft","topRight","min","max","random","VECTOR","PI","Car","CONSTANTS","VEL_X","VEL_Y","jumpPower","grounded","rotation","landing","hypotenuse","sqrt","pow","CAR_WIDTH","CAR_HEIGHT","theta","jump","rotateCar","move","drawCar","isBoundBy","landedOnTrack","landProperly","TERMINAL_VEL","GRAVITY","keyState","forward","spaceDown","spaceRelease","leftDown","rightDown","carBox","save","translate","rotate","restore","angleOne","angleTwo","angleThree","angleFour","sideArray","coordinateArray","forEach","angle","i","x","cos","y","sin","push","bottomRight","bottomLeft","rightSide","leftSide","tracks","length","collisionObj","landingVector","Object","keys","currentVec","hasOwnProperty","BotWheels","canvas","getContext","MAP_WIDTH","MAP_HEIGHT","document","addEventListener","keyDown","bind","keyUp","restartButton","drawBackground","fillRect","drawRestart","font","fillText","animateTracks","car","running","requestAnimationFrame","restart","createTracks","play","pop","setCamera","cameraX","startingTracks","regulateTracks","nextTrack","shift","e","code","window","getElementById"],"sourceRoot":""}